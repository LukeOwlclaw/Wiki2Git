# You can learn more about editorconfig here: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference

# This .editorconfig is the root config file. Do not look for other .editorconfig files in folder close to disk root.
root=true

[*.{bat,cmd,config,cpp,cs,cshtml,css,h,js,json,propdef,props,query,ruleset,runsettings,sql,vsspell,xaml,ts,tsx}]

end_of_line = crlf

[*.cs]

#Core editorconfig formatting - indentation

#use soft tabs (spaces) for indentation
indent_style = space

#Formatting - indentation options

#indent switch case contents.
csharp_indent_case_contents = true
#indent switch labels
csharp_indent_switch_labels = true

#Formatting - new line options

#place catch statements on a new line
csharp_new_line_before_catch = true
#place else statements on a new line
csharp_new_line_before_else = true
#require finally statements to be on a new line after the closing brace
csharp_new_line_before_finally = true
#require braces to be on a new line for all constructs, including properties, types, lambdas, methods, control_blocks, accessors, and object_collection (also known as "Allman" style)
csharp_new_line_before_open_brace = all

#Formatting - organize using options

#sort System.* using directives alphabetically, and place them before other usings
dotnet_sort_system_directives_first = true

#Formatting - spacing options

#require NO space between a cast and the value
csharp_space_after_cast = false
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_after_colon_in_inheritance_clause = true
#require a space after a keyword in a control flow statement such as a for loop
csharp_space_after_keywords_in_control_flow_statements = true
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_before_colon_in_inheritance_clause = true
#remove space within empty argument list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false
#remove space between method call name and opening parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
#do not place space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
#remove space within empty parameter list parentheses for a method declaration
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
#place a space character after the opening parenthesis and before the closing parenthesis of a method declaration parameter list.
csharp_space_between_method_declaration_parameter_list_parentheses = false

#Formatting - wrapping options

#leave code block on single line
csharp_preserve_single_line_blocks = true
#leave statements and member declarations on the same line
csharp_preserve_single_line_statements = true

#Style - expression bodied member options

#prefer block bodies for constructors
csharp_style_expression_bodied_constructors = false:suggestion
#prefer block bodies for methods
csharp_style_expression_bodied_methods = false:suggestion
#prefer expression-bodied members for properties
csharp_style_expression_bodied_properties = true:suggestion

#Style - expression level options

#prefer out variables to be declared before the method call
csharp_style_inlined_variable_declaration = false:suggestion
#prefer the type name for member access expressions, instead of the language keyword
dotnet_style_predefined_type_for_member_access = true:suggestion

#Style - implicit and explicit types

#prefer explicit type over var to declare variables with built-in system types such as int
csharp_style_var_for_built_in_types = true:none
#prefer var when the type is already mentioned on the right-hand side of a declaration expression
csharp_style_var_when_type_is_apparent = true:none
csharp_style_var_elsewhere = true:none

#Style - language keyword and framework type options

#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

#Style - qualification options

#prefer fields not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_field = false:suggestion
#prefer methods not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_method = false:suggestion
#prefer properties not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_property = false:suggestion
#prefer events not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_event = false:suggestion

#prefer explicit tuple element names, e.g.: DataContext.Objects.Select(o => new { Object = o, Metadata = o.Metadata});  INSTEAD OF ... { Object = o, o.Metadata});
dotnet_style_prefer_inferred_anonymous_type_member_names = false:warning
dotnet_style_prefer_inferred_tuple_names = false:warning



##########################################
# Naming conventions
#
# Note: These conventions are only enforced by VisualStudio, not by MSBuild.
# They thus do not (yet) replace StyleCop rules but extend them, see "Samples for testing" below
##########################################

# private const string PascalCasing (no prefix)
dotnet_naming_symbols.private_const_fields.applicable_kinds = field
dotnet_naming_symbols.private_const_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_const_fields.required_modifiers = const
dotnet_naming_rule.private_const_fields_must_be_pascal_case.severity = error
dotnet_naming_rule.private_const_fields_must_be_pascal_case.symbols = private_const_fields
dotnet_naming_rule.private_const_fields_must_be_pascal_case.style = pascal_case_style

# private static readonly string PascalCasing (no prefix) -- analogous to "const", used where const not allowed
dotnet_naming_symbols.private_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_readonly_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_static_readonly_fields.required_modifiers = static, readonly
dotnet_naming_rule.private_static_readonly_fields_must_be_pascal_case.severity = error
dotnet_naming_rule.private_static_readonly_fields_must_be_pascal_case.symbols = private_static_readonly_fields
dotnet_naming_rule.private_static_readonly_fields_must_be_pascal_case.style = pascal_case_style

# private static string g*
# For Visual Studio 2017 this rule must come after the previous two
dotnet_naming_symbols.private_static_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_static_fields.required_modifiers = static
dotnet_naming_rule.private_static_fields_must_be_g_pascal_case.severity = error
dotnet_naming_rule.private_static_fields_must_be_g_pascal_case.symbols = private_static_fields
dotnet_naming_rule.private_static_fields_must_be_g_pascal_case.style = g_pascal_case_style

# private string mPascalCase ( MUST BE PLACED AFTER SA1401 from https://github.com/RehanSaeed/EditorConfig/blob/master/.editorconfig )
dotnet_naming_symbols.private_instance_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_instance_fields.applicable_kinds = field
dotnet_naming_rule.private_instance_fields_must_be_m_pascal_case.severity = error
dotnet_naming_rule.private_instance_fields_must_be_m_pascal_case.symbols = private_instance_fields
dotnet_naming_rule.private_instance_fields_must_be_m_pascal_case.style = m_pascal_case_style


##########################################
# Styles used by Naming conventions
##########################################

# camel_case_style - Define the camelCase style
dotnet_naming_style.camel_case_style.capitalization = camel_case
# pascal_case_style - Define the PascalCase style
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
# g_pascal_case_style - Define the PascalCase style prefixed by "g"
dotnet_naming_style.g_pascal_case_style.capitalization = pascal_case
dotnet_naming_style.g_pascal_case_style.required_prefix = g
# m_pascal_case_style - Define the PascalCase style prefixed by "m
dotnet_naming_style.m_pascal_case_style.capitalization = pascal_case
dotnet_naming_style.m_pascal_case_style.required_prefix = m

##########################################
# Samples for testing - StyleCop only catches parts of convention violations
##########################################
#    // # private static string g*
#    private static string gGood;
#    private static string bad;
#    private static string Bad2; // SA1306
#   
#    // # private const string PascalCasing (no prefix)
#    private const string PascalCasingGood = "world";
#    private const string pascalCasingBad = "shoe"; // SA1303
#   
#    // # private static readonly string PascalCasing (no prefix) 
#    private static readonly string PascalCasingGoodStatic = "mouse";
#    private static readonly string pascalCasingBad2 = "house"; // SA1311
#   
#    // # private fields -> mPascalCase
#    private string mPascalCaseGood;
#    private string pascalCaseBad;
#    private string PascalCaseBad; // SA1306

# IDE0028 Use collection initializers, e.g. var list = new List<int> { 1, 2 }; instead of var list = new List<int>(); list.Add(1); list.Add(2);
dotnet_diagnostic.IDE0028.severity = error
# IDE0049 Use language keywords instead of framework type names for type references, e.g. int.MaxValue instead of Int32.MaxValue
dotnet_diagnostic.IDE0049.severity = error
# IDE0051 Remove unused private member
dotnet_diagnostic.IDE0051.severity = error
# IDE0052 Remove unread private member
dotnet_diagnostic.IDE0052.severity = error
# IDE0055: Fix formatting - without this setting the style rules are not checked
dotnet_diagnostic.IDE0055.severity = error
# IDE0059 Unnecessary assignment of a value to ..., e.g. int unusedValue = 0;
dotnet_diagnostic.IDE0059.severity = error
# IDE0071 Interpolation can be simplified, e.g. Log($"Error: {ex.ToString()}")
dotnet_diagnostic.IDE0071.severity = error
# IDE0075 Conditional expression can be simplified, e.g. bool enabled = setting == 1 ? true : false
dotnet_diagnostic.IDE0075.severity = error
# IDE0079 Remove unnecessary suppression, e.g. #pragma warning disable IDE1006 when there is no violation
dotnet_diagnostic.IDE0079.severity = error
